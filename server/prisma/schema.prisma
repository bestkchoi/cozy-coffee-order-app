// COZY 커피 주문 앱 데이터베이스 스키마
// PRD.md에 정의된 데이터 모델을 기반으로 작성

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 메뉴 모델
model Menu {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  price       Int      // 원 단위로 저장
  imageUrl    String?  @map("image_url") @db.VarChar(255)
  stock       Int      @default(0)
  category    String   @default("coffee") @db.VarChar(50)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 관계
  options Option[]
  orderItems OrderItem[]

  @@map("menus")
}

// 옵션 모델
model Option {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  price     Int      @default(0) // 원 단위로 저장
  menuId    Int      @map("menu_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 관계
  menu       Menu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("options")
}

// 주문 모델
model Order {
  id           Int      @id @default(autoincrement())
  orderTime    DateTime @default(now()) @map("order_time")
  status       String   @default("received") @db.VarChar(20) // received, preparing, completed
  totalAmount  Int      @map("total_amount") // 원 단위로 저장
  items        Json     // 주문 아이템 상세 정보
  customerInfo Json?    @map("customer_info") // 향후 확장을 위한 고객 정보
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 관계
  orderItems OrderItem[]

  @@map("orders")
}

// 주문 아이템 모델 (정규화를 위한 중간 테이블)
model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int     @map("order_id")
  menuId       Int     @map("menu_id")
  optionId     Int?    @map("option_id")
  quantity     Int
  itemPrice    Int     @map("item_price") // 개별 아이템 가격
  totalPrice   Int     @map("total_price") // 수량 * 아이템 가격

  // 관계
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu   Menu   @relation(fields: [menuId], references: [id])
  option Option? @relation(fields: [optionId], references: [id])

  @@map("order_items")
}
